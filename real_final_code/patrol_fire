#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from geometry_msgs.msg import Twist
from custom_msgs.msg import DepthTargetMsg  # Depth 메시지 가정
from turtlebot4_navigation.turtlebot4_navigator import TurtleBot4Directions, TurtleBot4Navigator
import random
import time

class PatrolFireNode(Node):
    def __init__(self):
        super().__init__('patrol_fire_node')
        # YOLO 감지 결과 구독 (화재 감지용)
        self.create_subscription(String, '/yolo_detection', self.detection_callback, 10)
        # Depth 데이터 구독
        self.create_subscription(DepthTargetMsg, '/depth/target_point', self.depth_callback, 10)
        # 이동 명령 퍼블리셔 (Nav2가 아닌 직접 제어용, 필요시)
        self.cmd_pub = self.create_publisher(Twist, '/cmd_vel', 10)
        # TurtleBot4Navigator 인스턴스
        self.navigator = TurtleBot4Navigator()
        # 상태 변수 초기화
        self.fire_protocol_running = False
        self.extinguisher_remain = 2  # 초기 소화기 잔량 (2개)
        self.fire_depth_pos = None  # 화재 깊이 위치
        self.fire_location = None  # 화재 발생 지점 저장

    def detection_callback(self, msg):
        # 감지 결과 예시: "fire,100,200,0.95"
        class_name, cx, cy, conf = msg.data.split(",")
        if class_name == "fire" and not self.fire_protocol_running:
            self.fire_protocol_running = True
            self.stop_robot()
            self.fire_protocol()

    def depth_callback(self, msg):
        """Depth target point callback with custom message"""
        if not self.fire_protocol_running:
            return
        self.fire_depth_pos = msg.target_point  # [x_center, y_center, depth_value]
        self.get_logger().info(f'Fire depth position: {self.fire_depth_pos}')
        if self.fire_depth_pos:
            self.fire_location = self.fire_depth_pos  # 화재 지점 저장

    def stop_robot(self):
        # 로봇 정지 (실제 이동 중단)
        twist = Twist()
        self.cmd_pub.publish(twist)
        self.navigator.cancelTask()
        self.get_logger().info('[ACTION] 로봇 정지! (이동 중단)')

    def fire_protocol(self):
        # 화재 감지 시 초기 대응 시뮬레이션 (실제 하드웨어 제어 X, 로그만 출력)
        self.get_logger().warn("[FIRE] 화재 감지! 119 신고 ")

        # 화재 발생 지점 저장 (depth_callback에서 갱신)
        if self.fire_depth_pos:
            self.fire_location = self.fire_depth_pos

        # 투척형 소화기 사용 시도
        self.get_logger().info(f"[FIRE] 투척형 소화기 잔량: {self.extinguisher_remain}개")
        if self.extinguisher_remain >= 1:
            self.get_logger().warn("[FIRE] 투척형 소화기 투척 시도 ")
            self.extinguisher_remain -= 1  # 소화기 잔량 감소
            self.get_logger().info(f"[FIRE] 소화기 투척 완료. 남은 소화기: {self.extinguisher_remain}개")
            
            # 소화 성공 여부 (랜덤 시뮬레이션)
            extinguish_success = random.choice([True, False])
            if extinguish_success:
                self.get_logger().info("[FIRE] 소화 성공, 화재 진압 ")
            else:
                self.get_logger().warn("[FIRE] 소화 실패 ")
        else:
            self.get_logger().warn(f"[FIRE] 투척형 소화기 없음! (remain={self.extinguisher_remain})")

        # 소화기 잔량이 0 이하이면 비치함으로 이동 및 보충
        if self.extinguisher_remain == 0:
            self.get_logger().info("[FIRE] 소화기 잔량 부족, 투척형 소화기 비치함으로 이동")
            self.navigate_to_refill_station()
            self.get_logger().info("[FIRE] 소화기 비치함 도착, 소화기 보충")
            self.extinguisher_remain = 2  # 소화기 보충
            self.get_logger().info(f"[FIRE] 소화기 보충 완료. 잔량: {self.extinguisher_remain}개")

            # 화재 발생 지점으로 복귀하여 재진압 시도
            if self.fire_location:
                self.get_logger().info("[FIRE] 화재 발생 지점으로 복귀 ")
                self.navigate_to_fire_location()
                self.get_logger().warn("[FIRE] 화재 지점 도착, 투척형 소화기 투척 시도 ")
                self.extinguisher_remain -= 1  # 추가 투척
                self.get_logger().info(f"[FIRE] 소화기 투척 완료. 남은 소화기: {self.extinguisher_remain}개")
                
                extinguish_success = random.choice([True, False])
                if extinguish_success:
                    self.get_logger().info("[FIRE] 소화 성공, 화재 진압 ")
                else:
                    self.get_logger().warn("[FIRE] 소화 실패 ")
            else:
                self.get_logger().info("[FIRE] 화재 지점 정보 없음, 순찰 복귀")

        self.get_logger().info("[FIRE] 화재 대응 완료, 프로토콜 종료")
        self.fire_protocol_running = False

    def navigate_to_refill_station(self):
        # 소화기 비치함 좌표로 이동 (예: [-1.0, 1.0]로 가정)
        refill_pose = self.navigator.getPoseStamped([-1.0, 1.0], TurtleBot4Directions.EAST)
        self.navigator.startToPose(refill_pose)
        self.get_logger().info("[NAV] 소화기 비치함으로 이동 중")
        time.sleep(2)  # 이동 시간 시뮬레이션, 실제 환경에서는 Nav2 완료 대기 로직 추가 권장.

    def navigate_to_fire_location(self):
        # 화재 발생 지점으로 복귀
        if self.fire_location:
            fire_pose = self.navigator.getPoseStamped(
                [float(self.fire_location[2]), float(self.fire_location[0] / 1000.0)],
                TurtleBot4Directions.NORTH
            )
            self.navigator.startToPose(fire_pose)
            self.get_logger().info("[NAV] 화재 발생 지점으로 이동 중")
            time.sleep(2)  # 이동 시간 시뮬레이션

def main():
    rclpy.init()
    node = PatrolFireNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()